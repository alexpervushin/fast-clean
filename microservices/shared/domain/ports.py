from typing import Protocol
from uuid import UUID

from microservices.shared.domain.entities import BaseEntity
from microservices.shared.domain.value_objects import Pagination


class IdGeneratorProtocol(Protocol):
    def generate_id(self) -> UUID: ...


class BaseRepositoryProtocol[D: BaseEntity](Protocol):
    async def get_by_id(self, obj_id: UUID) -> D: ...

    async def get_all(self) -> list[D]: ...

    async def get_all_paginated(self, pagination: Pagination) -> list[D]: ...

    async def create(self, obj: D) -> D: ...

    async def update(self, obj: D) -> D: ...

    async def delete(self, obj_id: UUID) -> None: ...


class PasswordHasherProtocol(Protocol):
    async def hash(self, password: str) -> str: ...
    async def verify(self, password: str, hashed_password: str) -> bool: ...